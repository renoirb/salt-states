<?php

## Managed by Salt Stack, please DO NOT TOUCH, or ALL CHANGES WILL be LOST!
## source {{ source }}

if ( !defined( 'MEDIAWIKI' ) ) {
        exit;
}

##
## Pillar db_servervs
##
##     salt-call pillar.get infra:db_servers:mysql:slaves
##
## Data we had at last highstate:
##
##     "{{ db_servers }}"
##
## NOTE: Ideally it would be salt mine. But its not reliable. We cannot get reliable data after adding/removing VMs
##
##################### database settings #####################
$wgDBname = "wpwiki";
##
## The Master DB server, the only one who should receive writes to
##
$wgDBservers = array(
        array(  'host'     => "{{ masterdb_ip|default('localhost') }}",
                'dbname'   => $wgDBname,
                'user'     => "{{ db_creds.username|default('root') }}",
                'password' => "{{ db_creds.password|default('') }}",
                'type'     => "mysql",
                'flags'    => DBO_DEFAULT,
                'load'     => 0 # <-- What makes MediaWiki to
                                #     know if he can send writes to
        )
);
{% if db_servers is iterable and db_servers|count >= 1 -%}
if ( !$wgCommandLineMode ) {
##
## The secondary DB servers. Only reads.
##
{% for ip_addr in db_servers -%}
$wgDBservers[] = array(
                'host'     => "{{ ip_addr }}",
                'dbname'   => $wgDBname,
                'user'     => "{{ db_creds.username|default('root') }}",
                'password' => "{{ db_creds.password|default('') }}",
                'type'     => "mysql",
                'flags'    => DBO_DEFAULT,
                'load'     => 1
        );
{%- endfor %}
}
{%- endif %}
$wgDBtype = "mysql";
##################### /database settings #####################

$wgArticlePath = '/wiki/$1';
$wgScriptPath  = '/w';

$wgSecretKey     = '{{ secrets['key']|default('foo') }}';
$wgUpgradeKey    = '{{ secrets['upgrade']|default('bar') }}';
$wgCaptchaSecret = '{{ secrets['captcha']|default('baz') }}';

$wgEnableUploads  = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

require_once("$IP/extensions/SwiftCloudFiles/SwiftCloudFiles.php");
$wgFileBackends[] = array(
    'name'           => 'local-backend',
    'class'          => 'FSFileBackend',
    'wikiId'         => $wgDBname,
    'lockManager'    => 'nullLockManager',
    'containerPaths' => array(
               'local-public'  => $wgUploadDirectory,
               'local-thumb'   => "$wgUploadDirectory/thumb",
               'local-deleted' => "$wgUploadDirectory/deleted",
               'local-temp'    => "$wgUploadDirectory/temp"
    ),
    'fileMode'       => 420
);

{% if swift_creds.password is defined -%}
$wgFileBackends[] = array( // backend config for wiki's local repo
       'class'              => 'SwiftFileBackend',
       'name'               => 'local-ceph',
       'wikiId'             => $wgDBname,
       'lockManager'        => 'nullLockManager',
       'swiftAuthUrl'       => '{{ swift_backend['mwSwiftAuthUrl'] }}',
       'swiftUser'          => '{{ swift_creds['username'] }}',
       'swiftKey'           => '{{ swift_creds['password'] }}',
       'swiftTempUrlKey'    => '', // TODO
       'parallelize'        => 'implicit',
       'cacheAuthInfo'      => true,
       //'readOnly'          => 'Disabled during migration; please wait'
);
{%- endif %}
$wgLocalFileRepo = array(
       'class'             => 'LocalRepo',
       'name'              => 'local',
       'scriptDirUrl'      => $wgScriptPath,
       'scriptExtension'   => $wgScriptExtension,
       'url'               => '/w/images',
       'hashLevels'        => 2,
       'thumbScriptUrl'    => false,
       'transformVia404'   => false,
       'deletedHashLevels' => 3,
       'backend'           => 'local-backend'
);
{% if swift_creds.password is defined -%}
$wgLocalFileRepo['backend'] = 'local-ceph';
$wgLocalFileRepo['zones']['public'] = array('url'=> '//static.'.$GLOBALS['siteTopLevelDomain'].'/w/public');
$wgLocalFileRepo['zones']['thumb']  = array('url'=> '//static.'.$GLOBALS['siteTopLevelDomain'].'/w/thumb');
$wgLocalFileRepo['zones']['temp']   = array('url'=> '//static.'.$GLOBALS['siteTopLevelDomain'].'/w/temp');
{%- endif %}

{% if fxa_sso %}
## In Settings.php weâ€™ll load mediawiki-fxa-sso if those are available
$wgWebPlatformAuth['client']['id']             = '{{ fxa_sso.id }}';
$wgWebPlatformAuth['client']['secret']         = '{{ fxa_sso.secret }}';
$wgWebPlatformAuth['endpoints']['fxa_oauth']   = 'https://oauth.accounts.'.$GLOBALS['siteTopLevelDomain'].'/v1/';
$wgWebPlatformAuth['endpoints']['fxa_profile'] = 'https://profile.accounts.'.$GLOBALS['siteTopLevelDomain'].'/v1/';
$wgWebPlatformAuth['methods']['authorize']     = 'authorization';
$wgWebPlatformAuth['methods']['token']         = 'token';
{% endif %}

# vim: set ft=php expandtab:

